`Two Sum`
function twoSum(nums,target){
    for(let i = 0;i<len(nums);i+=1){
        for(let j = 0;j<len(nums);j+=1){
            if(nums[i]+nums[j]==target){
                return [i,j];
            };
        };
    };
    return -1;
};
print("TWOSUM",twoSum([2,7,11,15],100));

`Palindrome Number`
function isPalindrome(num){
    let r = len(num)-1;
    let l = 0;
    while(l<r){
        if(num[l]!=num[r]){
            return false;
        };
        l+=1;
        r-=1;
    };
    return true;
};
print("ISPALINDROME", isPalindrome("12"));

`Valid Parenthesis`
function isValid(s){
    if(len(s)<2){
        return false;
    };
    const map = {
        "(":")",
        "[":"]",
        "{":"}"
    };
    const stack = [];
    for(let i = 0;i<len(s);i+=1){
        if(map[s[i]]!=unassigned){
            stack.push(map[s[i]]);
        }
        else{
            if(s[i]!=stack.pop()){
                return false;
            };
        };
    };
    return len(stack) == 0;
};
print("ISVALID",isValid(")(){}"));

`Linked List Cycle`
function hasCycle(head){
    let fast = head;
    let slow = head;
    while(fast!=null&&fast.next!=null){
        fast = fast.next.next;
        slow = slow.next;
        if(fast==slow){
            return true;
        };
    };
    return false;
};
let linkedListEx = {
    val : 3,
    next : {
        val : 2,
        next : {
            val: 0,
            next: null
        }
    }
};
linkedListEx.next.next.next ={val: -4,next: linkedListEx.next};
print("HASCYCLE", hasCycle(linkedListEx));